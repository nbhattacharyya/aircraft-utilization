import { RDSDataServiceException as __BaseException } from "./RDSDataServiceException";
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class BadRequestException extends __BaseException {
    name = "BadRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export const TypeHint = {
    DATE: "DATE",
    DECIMAL: "DECIMAL",
    JSON: "JSON",
    TIME: "TIME",
    TIMESTAMP: "TIMESTAMP",
    UUID: "UUID",
};
export class DatabaseErrorException extends __BaseException {
    name = "DatabaseErrorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DatabaseErrorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DatabaseErrorException.prototype);
    }
}
export class DatabaseNotFoundException extends __BaseException {
    name = "DatabaseNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DatabaseNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DatabaseNotFoundException.prototype);
    }
}
export class DatabaseResumingException extends __BaseException {
    name = "DatabaseResumingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DatabaseResumingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DatabaseResumingException.prototype);
    }
}
export class DatabaseUnavailableException extends __BaseException {
    name = "DatabaseUnavailableException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "DatabaseUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, DatabaseUnavailableException.prototype);
    }
}
export class ForbiddenException extends __BaseException {
    name = "ForbiddenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
export class HttpEndpointNotEnabledException extends __BaseException {
    name = "HttpEndpointNotEnabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HttpEndpointNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HttpEndpointNotEnabledException.prototype);
    }
}
export class InternalServerErrorException extends __BaseException {
    name = "InternalServerErrorException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
    }
}
export class InvalidResourceStateException extends __BaseException {
    name = "InvalidResourceStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidResourceStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidResourceStateException.prototype);
    }
}
export class InvalidSecretException extends __BaseException {
    name = "InvalidSecretException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSecretException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSecretException.prototype);
    }
}
export class SecretsErrorException extends __BaseException {
    name = "SecretsErrorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SecretsErrorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SecretsErrorException.prototype);
    }
}
export class ServiceUnavailableError extends __BaseException {
    name = "ServiceUnavailableError";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServiceUnavailableError",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableError.prototype);
    }
}
export class StatementTimeoutException extends __BaseException {
    name = "StatementTimeoutException";
    $fault = "client";
    dbConnectionId;
    constructor(opts) {
        super({
            name: "StatementTimeoutException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StatementTimeoutException.prototype);
        this.dbConnectionId = opts.dbConnectionId;
    }
}
export class TransactionNotFoundException extends __BaseException {
    name = "TransactionNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TransactionNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TransactionNotFoundException.prototype);
    }
}
export class NotFoundException extends __BaseException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export const DecimalReturnType = {
    DOUBLE_OR_LONG: "DOUBLE_OR_LONG",
    STRING: "STRING",
};
export const RecordsFormatType = {
    JSON: "JSON",
    NONE: "NONE",
};
export const LongReturnType = {
    LONG: "LONG",
    STRING: "STRING",
};
export class UnsupportedResultException extends __BaseException {
    name = "UnsupportedResultException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedResultException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedResultException.prototype);
    }
}
export var ArrayValue;
(function (ArrayValue) {
    ArrayValue.visit = (value, visitor) => {
        if (value.booleanValues !== undefined)
            return visitor.booleanValues(value.booleanValues);
        if (value.longValues !== undefined)
            return visitor.longValues(value.longValues);
        if (value.doubleValues !== undefined)
            return visitor.doubleValues(value.doubleValues);
        if (value.stringValues !== undefined)
            return visitor.stringValues(value.stringValues);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ArrayValue || (ArrayValue = {}));
export var Field;
(function (Field) {
    Field.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValue !== undefined)
            return visitor.arrayValue(value.arrayValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field || (Field = {}));
export var Value;
(function (Value) {
    Value.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.bitValue !== undefined)
            return visitor.bitValue(value.bitValue);
        if (value.bigIntValue !== undefined)
            return visitor.bigIntValue(value.bigIntValue);
        if (value.intValue !== undefined)
            return visitor.intValue(value.intValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.realValue !== undefined)
            return visitor.realValue(value.realValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        if (value.structValue !== undefined)
            return visitor.structValue(value.structValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Value || (Value = {}));
