"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AccessDeniedException: () => AccessDeniedException,
  ArrayValue: () => ArrayValue,
  BadRequestException: () => BadRequestException,
  BatchExecuteStatementCommand: () => BatchExecuteStatementCommand,
  BeginTransactionCommand: () => BeginTransactionCommand,
  CommitTransactionCommand: () => CommitTransactionCommand,
  DatabaseErrorException: () => DatabaseErrorException,
  DatabaseNotFoundException: () => DatabaseNotFoundException,
  DatabaseResumingException: () => DatabaseResumingException,
  DatabaseUnavailableException: () => DatabaseUnavailableException,
  DecimalReturnType: () => DecimalReturnType,
  ExecuteSqlCommand: () => ExecuteSqlCommand,
  ExecuteStatementCommand: () => ExecuteStatementCommand,
  Field: () => Field,
  ForbiddenException: () => ForbiddenException,
  HttpEndpointNotEnabledException: () => HttpEndpointNotEnabledException,
  InternalServerErrorException: () => InternalServerErrorException,
  InvalidResourceStateException: () => InvalidResourceStateException,
  InvalidSecretException: () => InvalidSecretException,
  LongReturnType: () => LongReturnType,
  NotFoundException: () => NotFoundException,
  RDSData: () => RDSData,
  RDSDataClient: () => RDSDataClient,
  RDSDataServiceException: () => RDSDataServiceException,
  RecordsFormatType: () => RecordsFormatType,
  RollbackTransactionCommand: () => RollbackTransactionCommand,
  SecretsErrorException: () => SecretsErrorException,
  ServiceUnavailableError: () => ServiceUnavailableError,
  StatementTimeoutException: () => StatementTimeoutException,
  TransactionNotFoundException: () => TransactionNotFoundException,
  TypeHint: () => TypeHint,
  UnsupportedResultException: () => UnsupportedResultException,
  Value: () => Value,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(index_exports);

// src/RDSDataClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "rds-data"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/RDSDataClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/RDSDataClient.ts
var RDSDataClient = class extends import_smithy_client.Client {
  static {
    __name(this, "RDSDataClient");
  }
  /**
   * The resolved configuration of RDSDataClient class. This is resolved and normalized from the {@link RDSDataClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultRDSDataHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/RDSData.ts


// src/commands/BatchExecuteStatementCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/RDSDataServiceException.ts

var RDSDataServiceException = class _RDSDataServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "RDSDataServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _RDSDataServiceException.prototype);
  }
};

// src/models/models_0.ts
var AccessDeniedException = class _AccessDeniedException extends RDSDataServiceException {
  static {
    __name(this, "AccessDeniedException");
  }
  name = "AccessDeniedException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var BadRequestException = class _BadRequestException extends RDSDataServiceException {
  static {
    __name(this, "BadRequestException");
  }
  name = "BadRequestException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _BadRequestException.prototype);
  }
};
var TypeHint = {
  DATE: "DATE",
  DECIMAL: "DECIMAL",
  JSON: "JSON",
  TIME: "TIME",
  TIMESTAMP: "TIMESTAMP",
  UUID: "UUID"
};
var DatabaseErrorException = class _DatabaseErrorException extends RDSDataServiceException {
  static {
    __name(this, "DatabaseErrorException");
  }
  name = "DatabaseErrorException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DatabaseErrorException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DatabaseErrorException.prototype);
  }
};
var DatabaseNotFoundException = class _DatabaseNotFoundException extends RDSDataServiceException {
  static {
    __name(this, "DatabaseNotFoundException");
  }
  name = "DatabaseNotFoundException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DatabaseNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DatabaseNotFoundException.prototype);
  }
};
var DatabaseResumingException = class _DatabaseResumingException extends RDSDataServiceException {
  static {
    __name(this, "DatabaseResumingException");
  }
  name = "DatabaseResumingException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DatabaseResumingException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DatabaseResumingException.prototype);
  }
};
var DatabaseUnavailableException = class _DatabaseUnavailableException extends RDSDataServiceException {
  static {
    __name(this, "DatabaseUnavailableException");
  }
  name = "DatabaseUnavailableException";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DatabaseUnavailableException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _DatabaseUnavailableException.prototype);
  }
};
var ForbiddenException = class _ForbiddenException extends RDSDataServiceException {
  static {
    __name(this, "ForbiddenException");
  }
  name = "ForbiddenException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
  }
};
var HttpEndpointNotEnabledException = class _HttpEndpointNotEnabledException extends RDSDataServiceException {
  static {
    __name(this, "HttpEndpointNotEnabledException");
  }
  name = "HttpEndpointNotEnabledException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "HttpEndpointNotEnabledException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _HttpEndpointNotEnabledException.prototype);
  }
};
var InternalServerErrorException = class _InternalServerErrorException extends RDSDataServiceException {
  static {
    __name(this, "InternalServerErrorException");
  }
  name = "InternalServerErrorException";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
  }
};
var InvalidResourceStateException = class _InvalidResourceStateException extends RDSDataServiceException {
  static {
    __name(this, "InvalidResourceStateException");
  }
  name = "InvalidResourceStateException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidResourceStateException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidResourceStateException.prototype);
  }
};
var InvalidSecretException = class _InvalidSecretException extends RDSDataServiceException {
  static {
    __name(this, "InvalidSecretException");
  }
  name = "InvalidSecretException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSecretException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidSecretException.prototype);
  }
};
var SecretsErrorException = class _SecretsErrorException extends RDSDataServiceException {
  static {
    __name(this, "SecretsErrorException");
  }
  name = "SecretsErrorException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SecretsErrorException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SecretsErrorException.prototype);
  }
};
var ServiceUnavailableError = class _ServiceUnavailableError extends RDSDataServiceException {
  static {
    __name(this, "ServiceUnavailableError");
  }
  name = "ServiceUnavailableError";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableError",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailableError.prototype);
  }
};
var StatementTimeoutException = class _StatementTimeoutException extends RDSDataServiceException {
  static {
    __name(this, "StatementTimeoutException");
  }
  name = "StatementTimeoutException";
  $fault = "client";
  /**
   * <p>The database connection ID that executed the SQL statement.</p>
   * @public
   */
  dbConnectionId;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "StatementTimeoutException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _StatementTimeoutException.prototype);
    this.dbConnectionId = opts.dbConnectionId;
  }
};
var TransactionNotFoundException = class _TransactionNotFoundException extends RDSDataServiceException {
  static {
    __name(this, "TransactionNotFoundException");
  }
  name = "TransactionNotFoundException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TransactionNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TransactionNotFoundException.prototype);
  }
};
var NotFoundException = class _NotFoundException extends RDSDataServiceException {
  static {
    __name(this, "NotFoundException");
  }
  name = "NotFoundException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NotFoundException.prototype);
  }
};
var DecimalReturnType = {
  DOUBLE_OR_LONG: "DOUBLE_OR_LONG",
  STRING: "STRING"
};
var RecordsFormatType = {
  JSON: "JSON",
  NONE: "NONE"
};
var LongReturnType = {
  LONG: "LONG",
  STRING: "STRING"
};
var UnsupportedResultException = class _UnsupportedResultException extends RDSDataServiceException {
  static {
    __name(this, "UnsupportedResultException");
  }
  name = "UnsupportedResultException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedResultException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UnsupportedResultException.prototype);
  }
};
var ArrayValue;
((ArrayValue2) => {
  ArrayValue2.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.booleanValues !== void 0) return visitor.booleanValues(value.booleanValues);
    if (value.longValues !== void 0) return visitor.longValues(value.longValues);
    if (value.doubleValues !== void 0) return visitor.doubleValues(value.doubleValues);
    if (value.stringValues !== void 0) return visitor.stringValues(value.stringValues);
    if (value.arrayValues !== void 0) return visitor.arrayValues(value.arrayValues);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ArrayValue || (ArrayValue = {}));
var Field;
((Field2) => {
  Field2.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.isNull !== void 0) return visitor.isNull(value.isNull);
    if (value.booleanValue !== void 0) return visitor.booleanValue(value.booleanValue);
    if (value.longValue !== void 0) return visitor.longValue(value.longValue);
    if (value.doubleValue !== void 0) return visitor.doubleValue(value.doubleValue);
    if (value.stringValue !== void 0) return visitor.stringValue(value.stringValue);
    if (value.blobValue !== void 0) return visitor.blobValue(value.blobValue);
    if (value.arrayValue !== void 0) return visitor.arrayValue(value.arrayValue);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(Field || (Field = {}));
var Value;
((Value3) => {
  Value3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.isNull !== void 0) return visitor.isNull(value.isNull);
    if (value.bitValue !== void 0) return visitor.bitValue(value.bitValue);
    if (value.bigIntValue !== void 0) return visitor.bigIntValue(value.bigIntValue);
    if (value.intValue !== void 0) return visitor.intValue(value.intValue);
    if (value.doubleValue !== void 0) return visitor.doubleValue(value.doubleValue);
    if (value.realValue !== void 0) return visitor.realValue(value.realValue);
    if (value.stringValue !== void 0) return visitor.stringValue(value.stringValue);
    if (value.blobValue !== void 0) return visitor.blobValue(value.blobValue);
    if (value.arrayValues !== void 0) return visitor.arrayValues(value.arrayValues);
    if (value.structValue !== void 0) return visitor.structValue(value.structValue);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(Value || (Value = {}));

// src/protocols/Aws_restJson1.ts
var se_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BatchExecute");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      database: [],
      parameterSets: /* @__PURE__ */ __name((_) => se_SqlParameterSets(_, context), "parameterSets"),
      resourceArn: [],
      schema: [],
      secretArn: [],
      sql: [],
      transactionId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchExecuteStatementCommand");
var se_BeginTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BeginTransaction");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      database: [],
      resourceArn: [],
      schema: [],
      secretArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BeginTransactionCommand");
var se_CommitTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/CommitTransaction");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      resourceArn: [],
      secretArn: [],
      transactionId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CommitTransactionCommand");
var se_ExecuteSqlCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/ExecuteSql");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      awsSecretStoreArn: [],
      database: [],
      dbClusterOrInstanceArn: [],
      schema: [],
      sqlStatements: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteSqlCommand");
var se_ExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/Execute");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      continueAfterTimeout: [],
      database: [],
      formatRecordsAs: [],
      includeResultMetadata: [],
      parameters: /* @__PURE__ */ __name((_) => se_SqlParametersList(_, context), "parameters"),
      resourceArn: [],
      resultSetOptions: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), "resultSetOptions"),
      schema: [],
      secretArn: [],
      sql: [],
      transactionId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteStatementCommand");
var se_RollbackTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/RollbackTransaction");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      resourceArn: [],
      secretArn: [],
      transactionId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RollbackTransactionCommand");
var de_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    updateResults: /* @__PURE__ */ __name((_) => de_UpdateResults(_, context), "updateResults")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchExecuteStatementCommand");
var de_BeginTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    transactionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BeginTransactionCommand");
var de_CommitTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    transactionStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CommitTransactionCommand");
var de_ExecuteSqlCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    sqlStatementResults: /* @__PURE__ */ __name((_) => de_SqlStatementResults(_, context), "sqlStatementResults")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ExecuteSqlCommand");
var de_ExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    columnMetadata: import_smithy_client._json,
    formattedRecords: import_smithy_client.expectString,
    generatedFields: /* @__PURE__ */ __name((_) => de_FieldList(_, context), "generatedFields"),
    numberOfRecordsUpdated: import_smithy_client.expectLong,
    records: /* @__PURE__ */ __name((_) => de_SqlRecords(_, context), "records")
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ExecuteStatementCommand");
var de_RollbackTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    transactionStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RollbackTransactionCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.rdsdata#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "BadRequestException":
    case "com.amazonaws.rdsdata#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "DatabaseErrorException":
    case "com.amazonaws.rdsdata#DatabaseErrorException":
      throw await de_DatabaseErrorExceptionRes(parsedOutput, context);
    case "DatabaseNotFoundException":
    case "com.amazonaws.rdsdata#DatabaseNotFoundException":
      throw await de_DatabaseNotFoundExceptionRes(parsedOutput, context);
    case "DatabaseResumingException":
    case "com.amazonaws.rdsdata#DatabaseResumingException":
      throw await de_DatabaseResumingExceptionRes(parsedOutput, context);
    case "DatabaseUnavailableException":
    case "com.amazonaws.rdsdata#DatabaseUnavailableException":
      throw await de_DatabaseUnavailableExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.rdsdata#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "HttpEndpointNotEnabledException":
    case "com.amazonaws.rdsdata#HttpEndpointNotEnabledException":
      throw await de_HttpEndpointNotEnabledExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.rdsdata#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "InvalidResourceStateException":
    case "com.amazonaws.rdsdata#InvalidResourceStateException":
      throw await de_InvalidResourceStateExceptionRes(parsedOutput, context);
    case "InvalidSecretException":
    case "com.amazonaws.rdsdata#InvalidSecretException":
      throw await de_InvalidSecretExceptionRes(parsedOutput, context);
    case "SecretsErrorException":
    case "com.amazonaws.rdsdata#SecretsErrorException":
      throw await de_SecretsErrorExceptionRes(parsedOutput, context);
    case "ServiceUnavailableError":
    case "com.amazonaws.rdsdata#ServiceUnavailableError":
      throw await de_ServiceUnavailableErrorRes(parsedOutput, context);
    case "StatementTimeoutException":
    case "com.amazonaws.rdsdata#StatementTimeoutException":
      throw await de_StatementTimeoutExceptionRes(parsedOutput, context);
    case "TransactionNotFoundException":
    case "com.amazonaws.rdsdata#TransactionNotFoundException":
      throw await de_TransactionNotFoundExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.rdsdata#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "UnsupportedResultException":
    case "com.amazonaws.rdsdata#UnsupportedResultException":
      throw await de_UnsupportedResultExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(RDSDataServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_DatabaseErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new DatabaseErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DatabaseErrorExceptionRes");
var de_DatabaseNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new DatabaseNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DatabaseNotFoundExceptionRes");
var de_DatabaseResumingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new DatabaseResumingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DatabaseResumingExceptionRes");
var de_DatabaseUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {});
  Object.assign(contents, doc);
  const exception = new DatabaseUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DatabaseUnavailableExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_HttpEndpointNotEnabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new HttpEndpointNotEnabledException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_HttpEndpointNotEnabledExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {});
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_InvalidResourceStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidResourceStateException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidResourceStateExceptionRes");
var de_InvalidSecretExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidSecretException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidSecretExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_SecretsErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new SecretsErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_SecretsErrorExceptionRes");
var de_ServiceUnavailableErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {});
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableError({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableErrorRes");
var de_StatementTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    dbConnectionId: import_smithy_client.expectLong,
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new StatementTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_StatementTimeoutExceptionRes");
var de_TransactionNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TransactionNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TransactionNotFoundExceptionRes");
var de_UnsupportedResultExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnsupportedResultException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnsupportedResultExceptionRes");
var se_ArrayOfArray = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ArrayValue(entry, context);
  });
}, "se_ArrayOfArray");
var se_ArrayValue = /* @__PURE__ */ __name((input, context) => {
  return ArrayValue.visit(input, {
    arrayValues: /* @__PURE__ */ __name((value) => ({ arrayValues: se_ArrayOfArray(value, context) }), "arrayValues"),
    booleanValues: /* @__PURE__ */ __name((value) => ({ booleanValues: (0, import_smithy_client._json)(value) }), "booleanValues"),
    doubleValues: /* @__PURE__ */ __name((value) => ({ doubleValues: se_DoubleArray(value, context) }), "doubleValues"),
    longValues: /* @__PURE__ */ __name((value) => ({ longValues: (0, import_smithy_client._json)(value) }), "longValues"),
    stringValues: /* @__PURE__ */ __name((value) => ({ stringValues: (0, import_smithy_client._json)(value) }), "stringValues"),
    _: /* @__PURE__ */ __name((name, value) => ({ [name]: value }), "_")
  });
}, "se_ArrayValue");
var se_DoubleArray = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se_DoubleArray");
var se_Field = /* @__PURE__ */ __name((input, context) => {
  return Field.visit(input, {
    arrayValue: /* @__PURE__ */ __name((value) => ({ arrayValue: se_ArrayValue(value, context) }), "arrayValue"),
    blobValue: /* @__PURE__ */ __name((value) => ({ blobValue: context.base64Encoder(value) }), "blobValue"),
    booleanValue: /* @__PURE__ */ __name((value) => ({ booleanValue: value }), "booleanValue"),
    doubleValue: /* @__PURE__ */ __name((value) => ({ doubleValue: (0, import_smithy_client.serializeFloat)(value) }), "doubleValue"),
    isNull: /* @__PURE__ */ __name((value) => ({ isNull: value }), "isNull"),
    longValue: /* @__PURE__ */ __name((value) => ({ longValue: value }), "longValue"),
    stringValue: /* @__PURE__ */ __name((value) => ({ stringValue: value }), "stringValue"),
    _: /* @__PURE__ */ __name((name, value) => ({ [name]: value }), "_")
  });
}, "se_Field");
var se_SqlParameter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [],
    typeHint: [],
    value: /* @__PURE__ */ __name((_) => se_Field(_, context), "value")
  });
}, "se_SqlParameter");
var se_SqlParameterSets = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_SqlParametersList(entry, context);
  });
}, "se_SqlParameterSets");
var se_SqlParametersList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_SqlParameter(entry, context);
  });
}, "se_SqlParametersList");
var de_ArrayOfArray = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ArrayValue((0, import_core2.awsExpectUnion)(entry), context);
  });
  return retVal;
}, "de_ArrayOfArray");
var de_ArrayValue = /* @__PURE__ */ __name((output, context) => {
  if (output.arrayValues != null) {
    return {
      arrayValues: de_ArrayOfArray(output.arrayValues, context)
    };
  }
  if (output.booleanValues != null) {
    return {
      booleanValues: (0, import_smithy_client._json)(output.booleanValues)
    };
  }
  if (output.doubleValues != null) {
    return {
      doubleValues: de_DoubleArray(output.doubleValues, context)
    };
  }
  if (output.longValues != null) {
    return {
      longValues: (0, import_smithy_client._json)(output.longValues)
    };
  }
  if (output.stringValues != null) {
    return {
      stringValues: (0, import_smithy_client._json)(output.stringValues)
    };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_ArrayValue");
var de_ArrayValueList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Value((0, import_core2.awsExpectUnion)(entry), context);
  });
  return retVal;
}, "de_ArrayValueList");
var de_DoubleArray = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de_DoubleArray");
var de_Field = /* @__PURE__ */ __name((output, context) => {
  if (output.arrayValue != null) {
    return {
      arrayValue: de_ArrayValue((0, import_core2.awsExpectUnion)(output.arrayValue), context)
    };
  }
  if (output.blobValue != null) {
    return {
      blobValue: context.base64Decoder(output.blobValue)
    };
  }
  if ((0, import_smithy_client.expectBoolean)(output.booleanValue) !== void 0) {
    return { booleanValue: (0, import_smithy_client.expectBoolean)(output.booleanValue) };
  }
  if ((0, import_smithy_client.limitedParseDouble)(output.doubleValue) !== void 0) {
    return { doubleValue: (0, import_smithy_client.limitedParseDouble)(output.doubleValue) };
  }
  if ((0, import_smithy_client.expectBoolean)(output.isNull) !== void 0) {
    return { isNull: (0, import_smithy_client.expectBoolean)(output.isNull) };
  }
  if ((0, import_smithy_client.expectLong)(output.longValue) !== void 0) {
    return { longValue: (0, import_smithy_client.expectLong)(output.longValue) };
  }
  if ((0, import_smithy_client.expectString)(output.stringValue) !== void 0) {
    return { stringValue: (0, import_smithy_client.expectString)(output.stringValue) };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_Field");
var de_FieldList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Field((0, import_core2.awsExpectUnion)(entry), context);
  });
  return retVal;
}, "de_FieldList");
var de__Record = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    values: /* @__PURE__ */ __name((_) => de_Row(_, context), "values")
  });
}, "de__Record");
var de_Records = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de__Record(entry, context);
  });
  return retVal;
}, "de_Records");
var de_ResultFrame = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    records: /* @__PURE__ */ __name((_) => de_Records(_, context), "records"),
    resultSetMetadata: import_smithy_client._json
  });
}, "de_ResultFrame");
var de_Row = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Value((0, import_core2.awsExpectUnion)(entry), context);
  });
  return retVal;
}, "de_Row");
var de_SqlRecords = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_FieldList(entry, context);
  });
  return retVal;
}, "de_SqlRecords");
var de_SqlStatementResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    numberOfRecordsUpdated: import_smithy_client.expectLong,
    resultFrame: /* @__PURE__ */ __name((_) => de_ResultFrame(_, context), "resultFrame")
  });
}, "de_SqlStatementResult");
var de_SqlStatementResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SqlStatementResult(entry, context);
  });
  return retVal;
}, "de_SqlStatementResults");
var de_StructValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    attributes: /* @__PURE__ */ __name((_) => de_ArrayValueList(_, context), "attributes")
  });
}, "de_StructValue");
var de_UpdateResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    generatedFields: /* @__PURE__ */ __name((_) => de_FieldList(_, context), "generatedFields")
  });
}, "de_UpdateResult");
var de_UpdateResults = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_UpdateResult(entry, context);
  });
  return retVal;
}, "de_UpdateResults");
var de_Value = /* @__PURE__ */ __name((output, context) => {
  if (output.arrayValues != null) {
    return {
      arrayValues: de_ArrayValueList(output.arrayValues, context)
    };
  }
  if ((0, import_smithy_client.expectLong)(output.bigIntValue) !== void 0) {
    return { bigIntValue: (0, import_smithy_client.expectLong)(output.bigIntValue) };
  }
  if ((0, import_smithy_client.expectBoolean)(output.bitValue) !== void 0) {
    return { bitValue: (0, import_smithy_client.expectBoolean)(output.bitValue) };
  }
  if (output.blobValue != null) {
    return {
      blobValue: context.base64Decoder(output.blobValue)
    };
  }
  if ((0, import_smithy_client.limitedParseDouble)(output.doubleValue) !== void 0) {
    return { doubleValue: (0, import_smithy_client.limitedParseDouble)(output.doubleValue) };
  }
  if ((0, import_smithy_client.expectInt32)(output.intValue) !== void 0) {
    return { intValue: (0, import_smithy_client.expectInt32)(output.intValue) };
  }
  if ((0, import_smithy_client.expectBoolean)(output.isNull) !== void 0) {
    return { isNull: (0, import_smithy_client.expectBoolean)(output.isNull) };
  }
  if ((0, import_smithy_client.limitedParseFloat32)(output.realValue) !== void 0) {
    return { realValue: (0, import_smithy_client.limitedParseFloat32)(output.realValue) };
  }
  if ((0, import_smithy_client.expectString)(output.stringValue) !== void 0) {
    return { stringValue: (0, import_smithy_client.expectString)(output.stringValue) };
  }
  if (output.structValue != null) {
    return {
      structValue: de_StructValue(output.structValue, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_Value");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");

// src/commands/BatchExecuteStatementCommand.ts
var BatchExecuteStatementCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "BatchExecuteStatement", {}).n("RDSDataClient", "BatchExecuteStatementCommand").f(void 0, void 0).ser(se_BatchExecuteStatementCommand).de(de_BatchExecuteStatementCommand).build() {
  static {
    __name(this, "BatchExecuteStatementCommand");
  }
};

// src/commands/BeginTransactionCommand.ts



var BeginTransactionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "BeginTransaction", {}).n("RDSDataClient", "BeginTransactionCommand").f(void 0, void 0).ser(se_BeginTransactionCommand).de(de_BeginTransactionCommand).build() {
  static {
    __name(this, "BeginTransactionCommand");
  }
};

// src/commands/CommitTransactionCommand.ts



var CommitTransactionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "CommitTransaction", {}).n("RDSDataClient", "CommitTransactionCommand").f(void 0, void 0).ser(se_CommitTransactionCommand).de(de_CommitTransactionCommand).build() {
  static {
    __name(this, "CommitTransactionCommand");
  }
};

// src/commands/ExecuteSqlCommand.ts



var ExecuteSqlCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "ExecuteSql", {}).n("RDSDataClient", "ExecuteSqlCommand").f(void 0, void 0).ser(se_ExecuteSqlCommand).de(de_ExecuteSqlCommand).build() {
  static {
    __name(this, "ExecuteSqlCommand");
  }
};

// src/commands/ExecuteStatementCommand.ts



var ExecuteStatementCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "ExecuteStatement", {}).n("RDSDataClient", "ExecuteStatementCommand").f(void 0, void 0).ser(se_ExecuteStatementCommand).de(de_ExecuteStatementCommand).build() {
  static {
    __name(this, "ExecuteStatementCommand");
  }
};

// src/commands/RollbackTransactionCommand.ts



var RollbackTransactionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("RdsDataService", "RollbackTransaction", {}).n("RDSDataClient", "RollbackTransactionCommand").f(void 0, void 0).ser(se_RollbackTransactionCommand).de(de_RollbackTransactionCommand).build() {
  static {
    __name(this, "RollbackTransactionCommand");
  }
};

// src/RDSData.ts
var commands = {
  BatchExecuteStatementCommand,
  BeginTransactionCommand,
  CommitTransactionCommand,
  ExecuteSqlCommand,
  ExecuteStatementCommand,
  RollbackTransactionCommand
};
var RDSData = class extends RDSDataClient {
  static {
    __name(this, "RDSData");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, RDSData);
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  RDSDataServiceException,
  __Client,
  RDSDataClient,
  RDSData,
  $Command,
  BatchExecuteStatementCommand,
  BeginTransactionCommand,
  CommitTransactionCommand,
  ExecuteSqlCommand,
  ExecuteStatementCommand,
  RollbackTransactionCommand,
  AccessDeniedException,
  BadRequestException,
  TypeHint,
  DatabaseErrorException,
  DatabaseNotFoundException,
  DatabaseResumingException,
  DatabaseUnavailableException,
  ForbiddenException,
  HttpEndpointNotEnabledException,
  InternalServerErrorException,
  InvalidResourceStateException,
  InvalidSecretException,
  SecretsErrorException,
  ServiceUnavailableError,
  StatementTimeoutException,
  TransactionNotFoundException,
  NotFoundException,
  DecimalReturnType,
  RecordsFormatType,
  LongReturnType,
  UnsupportedResultException,
  ArrayValue,
  Field,
  Value
});

