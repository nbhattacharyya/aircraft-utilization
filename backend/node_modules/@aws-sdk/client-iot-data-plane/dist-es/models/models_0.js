import { IoTDataPlaneServiceException as __BaseException } from "./IoTDataPlaneServiceException";
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalFailureException extends __BaseException {
    name = "InternalFailureException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    name = "InvalidRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class MethodNotAllowedException extends __BaseException {
    name = "MethodNotAllowedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MethodNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MethodNotAllowedException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    name = "ServiceUnavailableException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class UnauthorizedException extends __BaseException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
export class UnsupportedDocumentEncodingException extends __BaseException {
    name = "UnsupportedDocumentEncodingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedDocumentEncodingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedDocumentEncodingException.prototype);
    }
}
export const PayloadFormatIndicator = {
    UNSPECIFIED_BYTES: "UNSPECIFIED_BYTES",
    UTF8_DATA: "UTF8_DATA",
};
export class RequestEntityTooLargeException extends __BaseException {
    name = "RequestEntityTooLargeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RequestEntityTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RequestEntityTooLargeException.prototype);
    }
}
