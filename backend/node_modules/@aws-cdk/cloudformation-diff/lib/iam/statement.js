"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderCondition = exports.Effect = exports.Targets = exports.parseLambdaPermission = exports.parseStatements = exports.Statement = void 0;
const maybe_parsed_1 = require("../diff/maybe-parsed");
const util_1 = require("../util");
// namespace object imports won't work in the bundle for function exports
// eslint-disable-next-line @typescript-eslint/no-require-imports
const deepEqual = require('fast-deep-equal');
class Statement {
    constructor(statement) {
        if (typeof statement === 'string') {
            this.sid = undefined;
            this.effect = Effect.Unknown;
            this.resources = new Targets({}, '', '');
            this.actions = new Targets({}, '', '');
            this.principals = new Targets({}, '', '');
            this.condition = undefined;
            this.serializedIntrinsic = statement;
        }
        else {
            this.sid = expectString(statement.Sid);
            this.effect = expectEffect(statement.Effect);
            this.resources = new Targets(statement, 'Resource', 'NotResource');
            this.actions = new Targets(statement, 'Action', 'NotAction');
            this.principals = new Targets(statement, 'Principal', 'NotPrincipal');
            this.condition = statement.Condition;
            this.serializedIntrinsic = undefined;
        }
    }
    /**
     * Whether this statement is equal to the other statement
     */
    equal(other) {
        return (this.sid === other.sid
            && this.effect === other.effect
            && this.serializedIntrinsic === other.serializedIntrinsic
            && this.resources.equal(other.resources)
            && this.actions.equal(other.actions)
            && this.principals.equal(other.principals)
            && deepEqual(this.condition, other.condition));
    }
    render() {
        return this.serializedIntrinsic
            ? {
                resource: this.serializedIntrinsic,
                effect: '',
                action: '',
                principal: this.principals.render(), // these will be replaced by the call to replaceEmpty() from IamChanges
                condition: '',
            }
            : {
                resource: this.resources.render(),
                effect: this.effect,
                action: this.actions.render(),
                principal: this.principals.render(),
                condition: renderCondition(this.condition),
            };
    }
    /**
     * Return a machine-readable version of the changes.
     * This is only used in tests.
     *
     * @internal
     */
    _toJson() {
        return this.serializedIntrinsic
            ? (0, maybe_parsed_1.mkUnparseable)(this.serializedIntrinsic)
            : (0, maybe_parsed_1.mkParsed)((0, util_1.deepRemoveUndefined)({
                sid: this.sid,
                effect: this.effect,
                resources: this.resources._toJson(),
                principals: this.principals._toJson(),
                actions: this.actions._toJson(),
                condition: this.condition,
            }));
    }
    /**
     * Whether this is a negative statement
     *
     * A statement is negative if any of its targets are negative, inverted
     * if the Effect is Deny.
     */
    get isNegativeStatement() {
        const notTarget = this.actions.not || this.principals.not || this.resources.not;
        return this.effect === Effect.Allow ? notTarget : !notTarget;
    }
}
exports.Statement = Statement;
/**
 * Parse a list of statements from undefined, a Statement, or a list of statements
 */
function parseStatements(x) {
    if (x === undefined) {
        x = [];
    }
    if (!Array.isArray(x)) {
        x = [x];
    }
    return x.map((s) => new Statement(s));
}
exports.parseStatements = parseStatements;
/**
 * Parse a Statement from a Lambda::Permission object
 *
 * This is actually what Lambda adds to the policy document if you call AddPermission.
 */
function parseLambdaPermission(x) {
    // Construct a statement from
    const statement = {
        Effect: 'Allow',
        Action: x.Action,
        Resource: x.FunctionName,
    };
    if (x.Principal !== undefined) {
        if (x.Principal === '*') {
            // *
            statement.Principal = '*';
        }
        else if (/^\d{12}$/.test(x.Principal)) {
            // Account number
            // eslint-disable-next-line @aws-cdk/no-literal-partition
            statement.Principal = { AWS: `arn:aws:iam::${x.Principal}:root` };
        }
        else {
            // Assume it's a service principal
            // We might get this wrong vs. the previous one for tokens. Nothing to be done
            // about that. It's only for human readable consumption after all.
            statement.Principal = { Service: x.Principal };
        }
    }
    if (x.SourceArn !== undefined) {
        if (statement.Condition === undefined) {
            statement.Condition = {};
        }
        statement.Condition.ArnLike = { 'AWS:SourceArn': x.SourceArn };
    }
    if (x.SourceAccount !== undefined) {
        if (statement.Condition === undefined) {
            statement.Condition = {};
        }
        statement.Condition.StringEquals = { 'AWS:SourceAccount': x.SourceAccount };
    }
    if (x.EventSourceToken !== undefined) {
        if (statement.Condition === undefined) {
            statement.Condition = {};
        }
        statement.Condition.StringEquals = { 'lambda:EventSourceToken': x.EventSourceToken };
    }
    return new Statement(statement);
}
exports.parseLambdaPermission = parseLambdaPermission;
/**
 * Targets for a field
 */
class Targets {
    constructor(statement, positiveKey, negativeKey) {
        if (negativeKey in statement) {
            this.values = forceListOfStrings(statement[negativeKey]);
            this.not = true;
        }
        else {
            this.values = forceListOfStrings(statement[positiveKey]);
            this.not = false;
        }
        this.values.sort();
    }
    get empty() {
        return this.values.length === 0;
    }
    /**
     * Whether this set of targets is equal to the other set of targets
     */
    equal(other) {
        return this.not === other.not && deepEqual(this.values.sort(), other.values.sort());
    }
    /**
     * If the current value set is empty, put this in it
     */
    replaceEmpty(replacement) {
        if (this.empty) {
            this.values.push(replacement);
        }
    }
    /**
     * If the actions contains a '*', replace with this string.
     */
    replaceStar(replacement) {
        for (let i = 0; i < this.values.length; i++) {
            if (this.values[i] === '*') {
                this.values[i] = replacement;
            }
        }
        this.values.sort();
    }
    /**
     * Render into a summary table cell
     */
    render() {
        return this.not
            ? this.values.map(s => `NOT ${s}`).join('\n')
            : this.values.join('\n');
    }
    /**
     * Return a machine-readable version of the changes.
     * This is only used in tests.
     *
     * @internal
     */
    _toJson() {
        return { not: this.not, values: this.values };
    }
}
exports.Targets = Targets;
var Effect;
(function (Effect) {
    Effect["Unknown"] = "Unknown";
    Effect["Allow"] = "Allow";
    Effect["Deny"] = "Deny";
})(Effect || (exports.Effect = Effect = {}));
function expectString(x) {
    return typeof x === 'string' ? x : undefined;
}
function expectEffect(x) {
    if (x === Effect.Allow || x === Effect.Deny) {
        return x;
    }
    return Effect.Unknown;
}
function forceListOfStrings(x) {
    if (typeof x === 'string') {
        return [x];
    }
    if (typeof x === 'undefined' || x === null) {
        return [];
    }
    if (Array.isArray(x)) {
        return x.map(e => forceListOfStrings(e).join(','));
    }
    if (typeof x === 'object' && x !== null) {
        const ret = [];
        for (const [key, value] of Object.entries(x)) {
            ret.push(...forceListOfStrings(value).map(s => `${key}:${s}`));
        }
        return ret;
    }
    return [`${x}`];
}
/**
 * Render the Condition column
 */
function renderCondition(condition) {
    if (!condition || Object.keys(condition).length === 0) {
        return '';
    }
    const jsonRepresentation = JSON.stringify(condition, undefined, 2);
    // The JSON representation looks like this:
    //
    //  {
    //    "ArnLike": {
    //      "AWS:SourceArn": "${MyTopic86869434}"
    //    }
    //  }
    //
    // We can make it more compact without losing information by getting rid of the outermost braces
    // and the indentation.
    const lines = jsonRepresentation.split('\n');
    return lines.slice(1, lines.length - 1).map(s => s.slice(2)).join('\n');
}
exports.renderCondition = renderCondition;
//# sourceMappingURL=data:application/json;base64,